---
import NotificationBanner from './NotificationBanner.astro';
import ActionButtons from './ActionButtons.astro';

export interface Props {
  intros: {
    id: string;
    introText: string;
  }[];
  types: {
    id: string;
    typeName: string;
  }[];
  error?: string;
  success?: string;
  newSayingId?: string;
}

const { intros = [], types = [], error, success, newSayingId } = Astro.props;
---

<div class="w-full">
  {
    success && (
      <NotificationBanner type="success">
        <p>Your saying has been created successfully!</p>
        <ActionButtons viewUrl={`/saying/${newSayingId}`} createAnotherUrl="/create" />
      </NotificationBanner>
    )
  }

  {
    error && (
      <NotificationBanner type="error">
        <p>{error}</p>
      </NotificationBanner>
    )
  }

  <form
    action="/api/create-saying"
    method="POST"
    class="space-y-6 bg-white dark:bg-gray-800 rounded-lg shadow-md p-6"
  >
    <div>
      <label for="intro" class="block mb-2 text-sm font-medium text-gray-700 dark:text-gray-300">
        Introduction
      </label>
      <select
        name="intro"
        id="intro"
        required
        class="w-full p-3 border border-gray-300 dark:border-gray-700 rounded-md bg-white dark:bg-gray-900 text-gray-900 dark:text-white"
      >
        <option value="">Select an introduction...</option>
        {intros.map((intro) => <option value={intro.id}>{intro.introText}</option>)}
      </select>
    </div>

    <div>
      <fieldset class="mb-4">
        <legend class="block mb-2 text-sm font-medium text-gray-700 dark:text-gray-300">
          Type
        </legend>
        <div class="space-y-2">
          <div class="flex items-center">
            <input
              type="radio"
              id="typeExisting"
              name="typeChoice"
              value="existing"
              checked={true}
              class="form-radio mr-2"
            />
            <label for="typeExisting" class="text-sm">Use existing type</label>
          </div>
          <div class="flex items-center">
            <input
              type="radio"
              id="typeNew"
              name="typeChoice"
              value="new"
              class="form-radio mr-2"
            />
            <label for="typeNew" class="text-sm">Create new type</label>
          </div>
        </div>
      </fieldset>
    </div>

    <div id="existingTypeContainer">
      <label for="type" class="block mb-2 text-sm font-medium text-gray-700 dark:text-gray-300">
        Select Type
      </label>
      <select
        id="type"
        name="type"
        class="w-full p-3 border border-gray-300 dark:border-gray-700 rounded-md bg-white dark:bg-gray-900 text-gray-900 dark:text-white"
      >
        <option value="">Select a type...</option>
        {types.map((type) => <option value={type.id}>{type.typeName}</option>)}
      </select>
    </div>

    <div id="newTypeContainer" class="hidden">
      <label for="newType" class="block mb-2 text-sm font-medium text-gray-700 dark:text-gray-300">
        New Type Name
      </label>
      <input
        type="text"
        id="newType"
        name="newType"
        placeholder="Enter a new type..."
        class="w-full p-3 border border-gray-300 dark:border-gray-700 rounded-md bg-white dark:bg-gray-900 text-gray-900 dark:text-white"
      />
    </div>

    <div>
      <label
        for="firstKind"
        class="block mb-2 text-sm font-medium text-gray-700 dark:text-gray-300"
      >
        First Kind (Those who...)
      </label>
      <input
        type="text"
        id="firstKind"
        name="firstKind"
        placeholder="Enter the first kind..."
        required
        minlength="3"
        maxlength="100"
        class="w-full p-3 border border-gray-300 dark:border-gray-700 rounded-md bg-white dark:bg-gray-900 text-gray-900 dark:text-white"
      />
      <p class="mt-1 text-xs text-gray-500">3-100 characters</p>
    </div>

    <div>
      <label
        for="secondKind"
        class="block mb-2 text-sm font-medium text-gray-700 dark:text-gray-300"
      >
        Second Kind (Those who...)
      </label>
      <input
        type="text"
        id="secondKind"
        name="secondKind"
        placeholder="Enter the second kind..."
        required
        minlength="3"
        maxlength="100"
        class="w-full p-3 border border-gray-300 dark:border-gray-700 rounded-md bg-white dark:bg-gray-900 text-gray-900 dark:text-white"
      />
      <p class="mt-1 text-xs text-gray-500">3-100 characters</p>
    </div>

    <div class="flex justify-between pt-4">
      <a
        href="/dashboard"
        class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700"
      >
        Cancel
      </a>
      <button
        type="submit"
        class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 dark:bg-blue-700 dark:hover:bg-blue-800"
      >
        Create Saying
      </button>
    </div>
  </form>
</div>

<script>
  // Handle type choice radio buttons
  document.addEventListener('DOMContentLoaded', () => {
    const typeExistingRadio = document.getElementById('typeExisting') as HTMLInputElement;
    const typeNewRadio = document.getElementById('typeNew') as HTMLInputElement;
    const existingTypeContainer = document.getElementById('existingTypeContainer');
    const newTypeContainer = document.getElementById('newTypeContainer');
    const typeSelect = document.getElementById('type') as HTMLSelectElement;
    const newTypeInput = document.getElementById('newType') as HTMLInputElement;

    function updateTypeFields() {
      if (typeExistingRadio.checked) {
        existingTypeContainer?.classList.remove('hidden');
        newTypeContainer?.classList.add('hidden');
        typeSelect.required = true;
        newTypeInput.required = false;
      } else {
        existingTypeContainer?.classList.add('hidden');
        newTypeContainer?.classList.remove('hidden');
        typeSelect.required = false;
        newTypeInput.required = true;
      }
    }

    typeExistingRadio?.addEventListener('change', updateTypeFields);
    typeNewRadio?.addEventListener('change', updateTypeFields);

    // Initial update
    updateTypeFields();
  });
</script>
