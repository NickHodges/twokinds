---
import SayingCard from './SayingCard.astro';
import EmptyState from './EmptyState.astro';
import type { ExtendedSession } from '../env';
import { db, Likes, eq, and, count } from 'astro:db';

interface Saying {
  id: number;
  introText: string;
  firstLeadText: string;
  secondLeadText: string;
  firstKind: string;
  secondKind: string;
  createdAt: Date;
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
interface Props {
  sayings: Saying[];
  emptyStateText?: string;
  emptyStateCallToAction?: {
    text: string;
    href: string;
  };
  session?: ExtendedSession | null;
}

const {
  sayings,
  emptyStateText = 'No sayings found.',
  emptyStateCallToAction = {
    text: 'Create New Saying',
    href: '/create',
  },
  session,
} = Astro.props;

const isAuthenticated = !!session?.user;

// Get liked status and total likes for each saying
const likedStatus = new Map<number, boolean>();
const totalLikes = new Map<number, number>();

for (const saying of sayings) {
  // Get total likes for this saying
  const likesResult = await db
    .select({ value: count() })
    .from(Likes)
    .where(eq(Likes.sayingId, saying.id))
    .get();
  totalLikes.set(saying.id, likesResult?.value || 0);

  // Get liked status if user is authenticated
  if (session?.user?.id) {
    const like = await db
      .select()
      .from(Likes)
      .where(and(eq(Likes.userId, session.user.id), eq(Likes.sayingId, saying.id)))
      .get();
    likedStatus.set(saying.id, !!like);
  }
}
---

<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 auto-rows-fr">
  {
    sayings.length > 0 ? (
      sayings.map((saying) => (
        <SayingCard
          id={saying.id}
          introText={saying.introText}
          firstLeadText={saying.firstLeadText}
          secondLeadText={saying.secondLeadText}
          firstKind={saying.firstKind}
          secondKind={saying.secondKind}
          createdAt={saying.createdAt}
          isLiked={likedStatus.get(saying.id) || false}
          totalLikes={totalLikes.get(saying.id) || 0}
          isAuthenticated={isAuthenticated}
        />
      ))
    ) : (
      <EmptyState message={emptyStateText} callToAction={emptyStateCallToAction} />
    )
  }
</div>
