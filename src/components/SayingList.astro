---
import SayingCard from './SayingCard.astro';
import EmptyState from './EmptyState.astro';
import type { Saying } from '../types/saying';
import { db, Likes, eq, and, count } from 'astro:db';

const {
  sayings,
  emptyStateText = 'No sayings found.',
  emptyStateCallToAction = {
    text: 'Create New Saying',
    href: '/create',
  },
  session,
} = Astro.props;

const isAuthenticated = !!session?.user;

// Get liked status and total likes for each saying
const likedStatus = new Map<string, boolean>();
const totalLikes = new Map<string, number>();

for (const saying of sayings) {
  // Convert ID from string to number for database queries
  const sayingId = Number(saying.id);

  // Get total likes for this saying
  if (Number.isFinite(sayingId)) {
    const likesResult = await db
      .select({ value: count() })
      .from(Likes)
      .where(eq(Likes.sayingId, sayingId))
      .get();
    totalLikes.set(saying.id, likesResult?.value || 0);
  } else {
    totalLikes.set(saying.id, 0);
  }

  // Get liked status if user is authenticated
  const dbUserId = Astro.locals.dbUser?.id;
  if (dbUserId) {
    // Ensure the sayingId is a valid number
    if (Number.isFinite(sayingId)) {
      try {
        const like = await db
          .select()
          .from(Likes)
          .where(and(eq(Likes.userId, dbUserId), eq(Likes.sayingId, sayingId)))
          .get();
        likedStatus.set(saying.id, !!like);
      } catch (error) {
        console.error(`Error checking like status for saying ${saying.id}:`, error);
        likedStatus.set(saying.id, false);
      }
    } else {
      likedStatus.set(saying.id, false);
    }
  }
}
---

<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 auto-rows-fr">
  {
    sayings.length > 0 ? (
      sayings.map((saying: Saying) => (
        <SayingCard
          id={saying.id}
          introText={saying.introText || saying.intro_data?.introText || ''}
          typeName={saying.typeName || saying.type_data?.name || ''}
          pronoun={saying.pronoun || saying.type_data?.pronoun || 'who'}
          firstKind={saying.firstKind}
          secondKind={saying.secondKind}
          createdAt={saying.createdAt}
          isLiked={likedStatus.get(saying.id) || false}
          totalLikes={totalLikes.get(saying.id) || 0}
          isAuthenticated={isAuthenticated}
          canEdit={session?.user?.id === saying.userId}
        />
      ))
    ) : (
      <EmptyState message={emptyStateText} callToAction={emptyStateCallToAction} />
    )
  }
</div>
