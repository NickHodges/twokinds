---
import { server } from '../actions';

// eslint-disable-next-line @typescript-eslint/no-unused-vars
interface Props {
  sayingId: number;
  initialLiked?: boolean;
  totalLikes: number;
  isAuthenticated: boolean;
  class?: string;
}

const {
  sayingId,
  initialLiked = false,
  totalLikes = 0,
  isAuthenticated = false,
  class: className = '',
} = Astro.props;

// Only process the toggleLike action if it's a POST request
let result;
if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();
  result = await server.toggleLike(formData);
  console.log('Server-side like toggle result:', result);
}
---

{
  isAuthenticated ? (
    <div
      class="like-button-container"
      data-saying-id={sayingId.toString()}
      data-total-likes={totalLikes}
      data-liked={initialLiked}
    >
      <form method="POST" class="inline">
        <input type="hidden" name="sayingId" value={sayingId} />
        <input
          type="hidden"
          name="action"
          value={initialLiked ? 'unlike' : 'like'}
          id="likeAction"
        />

        <button
          type="submit"
          class:list={[
            'like-button inline-flex items-center text-xs font-medium gap-1 transition-colors',
            initialLiked
              ? 'text-red-600 dark:text-red-400'
              : 'text-gray-500 dark:text-gray-400 hover:text-red-600 dark:hover:text-red-400',
            className,
          ]}
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="currentColor"
            class="w-4 h-4"
          >
            <path d="M11.645 20.91l-.007-.003-.022-.012a15.247 15.247 0 01-.383-.218 25.18 25.18 0 01-4.244-3.17C4.688 15.36 2.25 12.174 2.25 8.25 2.25 5.322 4.714 3 7.688 3A5.5 5.5 0 0112 5.052 5.5 5.5 0 0116.313 3c2.973 0 5.437 2.322 5.437 5.25 0 3.925-2.438 7.111-4.739 9.256a25.175 25.175 0 01-4.244 3.17 15.247 15.247 0 01-.383.219l-.022.012-.007.004-.003.001a.752.752 0 01-.704 0l-.003-.001z" />
          </svg>
          <span class="like-count">{totalLikes}</span>
        </button>
      </form>
    </div>
  ) : (
    <div
      class="inline-flex items-center text-xs font-medium gap-1 text-gray-500 dark:text-gray-400"
      title="Sign in to like this saying"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        fill="currentColor"
        class="w-4 h-4"
      >
        <path d="M11.645 20.91l-.007-.003-.022-.012a15.247 15.247 0 01-.383-.218 25.18 25.18 0 01-4.244-3.17C4.688 15.36 2.25 12.174 2.25 8.25 2.25 5.322 4.714 3 7.688 3A5.5 5.5 0 0112 5.052 5.5 5.5 0 0116.313 3c2.973 0 5.437 2.322 5.437 5.25 0 3.925-2.438 7.111-4.739 9.256a25.175 25.175 0 01-4.244 3.17 15.247 15.247 0 01-.383.219l-.022.012-.007.004-.003.001a.752.752 0 01-.704 0l-.003-.001z" />
      </svg>
      <span>{totalLikes}</span>
    </div>
  )
}

<script>
  // Use JavaScript to enhance the form submission with AJAX to avoid page reload
  document.addEventListener('DOMContentLoaded', () => {
    const forms = document.querySelectorAll('.like-button-container form');

    forms.forEach((form) => {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();

        const form = e.currentTarget as HTMLFormElement;
        const container = form.closest('.like-button-container') as HTMLElement;

        if (!container) return;

        const likeCountElement = form.querySelector('.like-count') as HTMLElement;
        const likeButton = form.querySelector('button') as HTMLButtonElement;
        const actionInput = form.querySelector('#likeAction') as HTMLInputElement;

        const isLiked = container.dataset.liked === 'true';
        const currentCount = parseInt(likeCountElement?.textContent || '0', 10);

        // Optimistically update UI
        const newCount = isLiked ? currentCount - 1 : currentCount + 1;
        likeCountElement.textContent = newCount.toString();

        if (isLiked) {
          // Switching to unlike
          likeButton.classList.remove('text-red-600', 'dark:text-red-400');
          likeButton.classList.add(
            'text-gray-500',
            'dark:text-gray-400',
            'hover:text-red-600',
            'dark:hover:text-red-400'
          );
          container.dataset.liked = 'false';
          actionInput.value = 'like'; // For next click
        } else {
          // Switching to like
          likeButton.classList.add('text-red-600', 'dark:text-red-400');
          likeButton.classList.remove(
            'text-gray-500',
            'dark:text-gray-400',
            'hover:text-red-600',
            'dark:hover:text-red-400'
          );
          container.dataset.liked = 'true';
          actionInput.value = 'unlike'; // For next click
        }

        try {
          // Submit the form data via AJAX
          const formData = new FormData(form);
          const response = await fetch(form.action, {
            method: 'POST',
            body: formData,
          });

          if (!response.ok) {
            throw new Error('Network response was not ok');
          }

          const result = await response.json();

          // Update total likes count in the container
          container.dataset.totalLikes = newCount.toString();
          console.log('Client-side like toggle result:', result);
        } catch (error) {
          console.error('Error toggling like:', error);

          // Revert UI changes on error
          const originalLiked = !isLiked;
          const originalCount = isLiked ? currentCount : currentCount - 1;

          likeCountElement.textContent = originalCount.toString();

          if (originalLiked) {
            likeButton.classList.add('text-red-600', 'dark:text-red-400');
            likeButton.classList.remove(
              'text-gray-500',
              'dark:text-gray-400',
              'hover:text-red-600',
              'dark:hover:text-red-400'
            );
            actionInput.value = 'unlike';
          } else {
            likeButton.classList.remove('text-red-600', 'dark:text-red-400');
            likeButton.classList.add(
              'text-gray-500',
              'dark:text-gray-400',
              'hover:text-red-600',
              'dark:hover:text-red-400'
            );
            actionInput.value = 'like';
          }

          container.dataset.liked = originalLiked.toString();
          container.dataset.totalLikes = originalCount.toString();
        }
      });
    });
  });
</script>
