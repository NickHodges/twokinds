---
/**
 * @typedef {object} Props
 * @property {number} sayingId - ID of the saying to like
 * @property {boolean} [initialLiked=false] - Whether the saying is initially liked
 * @property {number} totalLikes - Total number of likes
 * @property {boolean} [isAuthenticated=false] - Whether the user is authenticated
 * @property {string} [class] - Additional CSS classes
 */

const {
  sayingId,
  initialLiked = false,
  totalLikes = 0,
  isAuthenticated = false,
  class: className = '',
} = Astro.props;
---

{
  isAuthenticated ? (
    <form
      method="POST"
      action="/api/like"
      data-saying-id={sayingId}
      data-total-likes={totalLikes}
      data-liked={initialLiked}
    >
      <button
        type="submit"
        class:list={[
          'flex items-center gap-1 rounded-full px-3 py-1.5 text-sm transition-colors',
          initialLiked
            ? 'bg-red-100 text-red-600 hover:bg-red-200'
            : 'bg-gray-100 text-gray-600 hover:bg-gray-200',
          className,
        ]}
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="16"
          height="16"
          viewBox="0 0 24 24"
          fill={initialLiked ? 'currentColor' : 'none'}
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="h-4 w-4"
          aria-hidden="true"
        >
          <path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z" />
        </svg>
        <span>{initialLiked ? 'Liked' : 'Like'}</span>
        <span class="ml-1">({totalLikes})</span>
      </button>
    </form>
  ) : (
    <div class="flex items-center gap-1 rounded-full px-3 py-1.5 text-sm text-gray-600">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="16"
        height="16"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="h-4 w-4"
        aria-hidden="true"
      >
        <path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z" />
      </svg>
      <span class="ml-1">{totalLikes}</span>
    </div>
  )
}

<script>
  // Client-side enhancement
  document.addEventListener('DOMContentLoaded', () => {
    const forms = document.querySelectorAll<HTMLFormElement>('form[data-saying-id]');

    forms.forEach((form) => {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const button = form.querySelector('button');
        if (!button) return;

        try {
          button.disabled = true;
          const sayingId = form.dataset.sayingId;

          const response = await fetch('/api/like', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ sayingId: Number(sayingId) }),
          });

          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Failed to like/unlike');
          }

          const { liked } = await response.json();
          form.dataset.liked = liked.toString();

          // Update button appearance
          const svg = button.querySelector('svg');
          if (svg) svg.setAttribute('fill', liked ? 'currentColor' : 'none');

          button.classList.toggle('bg-red-100', liked);
          button.classList.toggle('text-red-600', liked);
          button.classList.toggle('hover:bg-red-200', liked);
          button.classList.toggle('bg-gray-100', !liked);
          button.classList.toggle('text-gray-600', !liked);
          button.classList.toggle('hover:bg-gray-200', !liked);

          // Update text and like count
          const [likeText, likeCount] = button.querySelectorAll('span');
          if (likeText) likeText.textContent = liked ? 'Liked' : 'Like';

          // Update the like count
          let totalLikes = parseInt(form.dataset.totalLikes || '0');
          totalLikes = liked ? totalLikes + 1 : totalLikes - 1;
          form.dataset.totalLikes = totalLikes.toString();
          if (likeCount) likeCount.textContent = `(${totalLikes})`;
        } catch (error) {
          console.error('Error toggling like:', error);
          alert('Failed to update like status. Please try again.');
        } finally {
          button.disabled = false;
        }
      });
    });
  });
</script>
