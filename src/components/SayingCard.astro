---
import LikeButton from './LikeButton.astro';

// eslint-disable-next-line @typescript-eslint/no-unused-vars
interface Props {
  id: number;
  introText: string;
  typeName: string;
  firstKind: string;
  secondKind: string;
  createdAt: Date;
  isLiked?: boolean;
  totalLikes?: number;
  isAuthenticated?: boolean;
  canEdit?: boolean;
}

const {
  id,
  introText,
  typeName,
  firstKind,
  secondKind,
  createdAt,
  isLiked = false,
  totalLikes = 0,
  isAuthenticated = false,
  canEdit = false,
} = Astro.props;
---

<article
  class="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 shadow-sm hover:shadow-md transition-shadow overflow-hidden flex flex-col h-full group"
>
  <div class="p-6 flex-grow overflow-hidden">
    <h3
      class="text-lg font-medium text-gray-900 dark:text-white mb-3 line-clamp-2 group-hover:line-clamp-none transition-all"
    >
      {introText}
    </h3>

    <div class="space-y-2 relative">
      <h4 class="text-blue-600 dark:text-blue-400 font-medium mb-2">{typeName}</h4>
      <p class="text-gray-700 dark:text-gray-300">
        <span class="text-blue-600 dark:text-blue-400 font-medium">Those who </span>
        <span class="break-words line-clamp-3 group-hover:line-clamp-none transition-all"
          >{firstKind}</span
        >
      </p>
      <p class="text-gray-500 dark:text-gray-400 text-left text-sm font-medium">and</p>
      <p class="text-gray-700 dark:text-gray-300">
        <span class="text-blue-600 dark:text-blue-400 font-medium">those who </span>
        <span class="break-words line-clamp-3 group-hover:line-clamp-none transition-all"
          >{secondKind}</span
        >
      </p>
    </div>
  </div>

  <div
    class="px-6 py-3 bg-gray-50 dark:bg-gray-700 border-t border-gray-200 dark:border-gray-600 flex justify-between items-center mt-auto"
  >
    <div class="flex items-center gap-4">
      {
        id && (
          <>
            <a
              href={`/saying/${id}`}
              class="text-xs text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 font-medium"
            >
              View as quote →
            </a>
            {canEdit && (
              <>
                <a
                  href={`/edit-saying/${id}`}
                  class="text-xs text-emerald-600 dark:text-emerald-400 hover:text-emerald-800 dark:hover:text-emerald-300 font-medium"
                >
                  Edit saying →
                </a>
                <button
                  type="button"
                  class="delete-saying-btn text-xs text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300 font-medium"
                  data-saying-id={id}
                >
                  Delete
                </button>
              </>
            )}
            <LikeButton
              sayingId={id}
              initialLiked={isLiked}
              totalLikes={totalLikes}
              isAuthenticated={isAuthenticated}
            />
          </>
        )
      }
    </div>
    <time datetime={createdAt.toISOString()} class="text-xs text-gray-500 dark:text-gray-400">
      {
        new Date(createdAt).toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'short',
          day: 'numeric',
        })
      }
    </time>
  </div>
</article>

<script>
  // Add event listeners to all delete buttons
  document.addEventListener('DOMContentLoaded', () => {
    const deleteButtons = document.querySelectorAll('.delete-saying-btn');

    deleteButtons.forEach((button) => {
      button.addEventListener('click', async (e) => {
        const button = e.currentTarget as HTMLButtonElement;
        const sayingId = button.dataset.sayingId;

        if (!sayingId) return;

        if (confirm('Are you sure you want to delete this saying? This cannot be undone.')) {
          try {
            const response = await fetch(`/api/delete-saying?id=${sayingId}`, {
              method: 'DELETE',
            });

            const result = await response.json();

            if (result.success) {
              // Find the closest article element (the card) and remove it
              const card = button.closest('article');
              card?.classList.add('opacity-0', 'scale-95');

              // Add transition and then remove from DOM
              setTimeout(() => {
                card?.remove();
              }, 300);
            } else {
              alert(`Error: ${result.error || 'Failed to delete saying'}`);
            }
          } catch (error) {
            console.error('Error deleting saying:', error);
            alert('An error occurred while deleting the saying');
          }
        }
      });
    });
  });
</script>

<style>
  article {
    transition:
      opacity 0.3s ease,
      transform 0.3s ease;
  }
</style>
