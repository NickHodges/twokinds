---
import LikeButton from './LikeButton.astro';
import { getUserIdFromSession } from '../utils/user-db';
import type { Session } from '../env';

// eslint-disable-next-line @typescript-eslint/no-unused-vars
interface Props {
  id: number;
  introText: string;
  typeName: string;
  firstKind: string;
  secondKind: string;
  createdAt: Date;
  isLiked?: boolean;
  totalLikes?: number;
  isAuthenticated?: boolean;
  canEdit?: boolean;
}

const {
  id,
  introText,
  typeName,
  firstKind,
  secondKind,
  createdAt,
  isLiked = false,
  totalLikes = 0,
  isAuthenticated = false,
  canEdit = false,
} = Astro.props;

// Get userId from session if available
const session = Astro.locals.session as Session | null;
const sessionUserId = getUserIdFromSession(session);
---

<article
  class="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 shadow-sm hover:shadow-md transition-shadow overflow-hidden flex flex-col h-full group"
  data-user-id={sessionUserId}
>
  <div class="p-6 flex-grow overflow-hidden">
    <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-3 line-clamp-2 transition-all">
      {introText}
    </h3>

    <div class="space-y-2 relative">
      <h4 class="text-blue-600 dark:text-blue-400 font-medium mb-2">{typeName}</h4>
      <p class="text-gray-700 dark:text-gray-300">
        <span class="text-blue-600 dark:text-blue-400 font-medium inline">Those who </span>
        <span class="break-words line-clamp-3 transition-all inline">{firstKind}</span>
      </p>
      <p class="text-gray-500 dark:text-gray-400 text-left text-sm font-medium">and</p>
      <p class="text-gray-700 dark:text-gray-300">
        <span class="text-blue-600 dark:text-blue-400 font-medium">Those who </span>
        <span class="break-words line-clamp-3 group-hover:line-clamp-none transition-all"
          >{secondKind}</span
        >
      </p>
    </div>
  </div>

  <div
    class="px-6 py-3 bg-gray-50 dark:bg-gray-700 border-t border-gray-200 dark:border-gray-600 flex justify-between items-center mt-auto"
  >
    <div class="flex items-center gap-4">
      {
        id && (
          <>
            <a
              href={`/saying/${id}`}
              class="text-xs text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 font-medium"
            >
              View as quote →
            </a>
            {canEdit && (
              <>
                <a
                  href={`/edit-saying/${id}`}
                  class="text-xs text-emerald-600 dark:text-emerald-400 hover:text-emerald-800 dark:hover:text-emerald-300 font-medium"
                >
                  Edit saying →
                </a>
                <form method="POST" class="inline delete-saying-form" data-id={id}>
                  <input type="hidden" name="sayingId" value={id} />
                  <button
                    type="submit"
                    class="delete-saying-btn text-xs text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300 font-medium bg-transparent border-none p-0 cursor-pointer"
                  >
                    Delete
                  </button>
                </form>
              </>
            )}
            <LikeButton
              sayingId={id}
              initialLiked={isLiked}
              totalLikes={totalLikes}
              isAuthenticated={isAuthenticated}
            />
          </>
        )
      }
    </div>
    <time datetime={createdAt.toISOString()} class="text-xs text-gray-500 dark:text-gray-400">
      {
        new Date(createdAt).toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'short',
          day: 'numeric',
        })
      }
    </time>
  </div>
</article>

<script>
  // Handle delete saying forms
  document.addEventListener('DOMContentLoaded', () => {
    const deleteForms = document.querySelectorAll('.delete-saying-form');

    deleteForms.forEach((form) => {
      form.addEventListener('submit', async (e) => {
        e.preventDefault(); // Prevent default form submission

        if (confirm('Are you sure you want to delete this saying? This cannot be undone.')) {
          try {
            // Get the article element that contains this form
            const article = form.closest('article');
            if (!article) return;

            // Get the saying ID from the data attribute
            const sayingId = parseInt(form.getAttribute('data-id'), 10);

            if (!sayingId) {
              throw new Error('Saying ID not found');
            }

            // Use the API endpoint directly
            const response = await fetch('/api/delete-saying', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ sayingId }),
            });

            const result = await response.json();
            console.log('Delete API response:', result);

            if (result.success) {
              console.log('Deletion successful');
              // Apply animation and remove the card
              article.classList.add('opacity-0', 'scale-95');
              setTimeout(() => article.remove(), 300);
            } else {
              // Show error message
              const errorMessage = result.error || 'Failed to delete saying';
              const errorContainer = document.createElement('div');
              errorContainer.className =
                'fixed top-4 right-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded z-50';
              errorContainer.innerHTML = `<p>Error: ${errorMessage}</p>`;
              document.body.appendChild(errorContainer);
              setTimeout(() => errorContainer.remove(), 5000);
            }
          } catch (error) {
            console.error('Error deleting saying:', error);
            // Show error notification
            const errorContainer = document.createElement('div');
            errorContainer.className =
              'fixed top-4 right-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded z-50';
            errorContainer.innerHTML = `<p>An error occurred while deleting the saying: ${error instanceof Error ? error.message : 'Unknown error'}</p>`;
            document.body.appendChild(errorContainer);
            setTimeout(() => errorContainer.remove(), 5000);
          }
        }
      });
    });
  });
</script>

<style>
  article {
    transition:
      opacity 0.3s ease,
      transform 0.3s ease;
  }
</style>
