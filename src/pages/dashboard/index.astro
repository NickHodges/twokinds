---
import MainLayout from '../../layouts/MainLayout.astro';
import '../../styles/index.css';
import SayingList from '../../components/SayingList.astro';
import Pagination from '../../components/Pagination.astro';
import EmptyState from '../../components/EmptyState.astro';
import { config } from '../../lib/config';
import { getUserSayings } from '../../lib/db-service';
import { getUserDbId } from '../../utils/user-db';
import type { ExtendedSession } from '../../env';
import type { Saying } from '../../types/saying';
import { db, Users, eq } from 'astro:db';
import { createLogger } from '../../utils/logger';

const logger = createLogger('Dashboard');

// Don't prerender so we always get fresh data
export const prerender = false;

// Log the URL to help with debugging
logger.debug('Dashboard route accessed', { url: Astro.url.toString() });

// Get current user's session
const session = Astro.locals.session as ExtendedSession | null;

// Redirect if not logged in
if (!session?.user) {
  return Astro.redirect('/auth/signin');
}

// Empty array for the page data and default pagination
let sayingsForCurrentPage: Saying[] = [];
let totalPages = 1;
let currentPage = 1;

// Get user's sayings with joins to get intro and type data
try {
  logger.debug('Dashboard - user session', {
    id: session.user.id,
    type: typeof session.user.id,
    email: session.user.email,
  });

  // Use the database user ID if available from middleware, otherwise look it up
  let userDbId = Astro.locals.dbUser?.id;

  if (!userDbId) {
    try {
      userDbId = await getUserDbId(session.user);

      if (!userDbId) {
        // Try one more time with forced recreation
        logger.warn('First attempt to get user ID failed, trying with forced recreation');

        // Make a direct database call to find and fix the user
        const existingUser = await db
          .select()
          .from(Users)
          .where(eq(Users.email, session.user.email))
          .get()
          .catch(() => null);

        if (existingUser) {
          // User exists but has a null ID - try to fix
          if (existingUser.id === null || existingUser.id === undefined) {
            logger.warn('Found user with null ID, attempting to fix', {
              email: session.user.email,
            });

            // Delete the null ID user first
            await db
              .delete(Users)
              .where(eq(Users.email, session.user.email))
              .run()
              .catch((err) => {
                logger.error('Error deleting user with null ID', { error: err });
              });

            // Create a new user with proper ID
            const now = new Date();
            const newUser = await db
              .insert(Users)
              .values({
                name: session.user.name || '',
                email: session.user.email,
                image: session.user.image || '',
                provider: 'oauth',
                role: 'user',
                lastLogin: now,
                createdAt: now,
                updatedAt: now,
                preferences: {},
              })
              .returning()
              .get();

            userDbId = newUser.id;
            logger.info('Fixed user with null ID', { userId: userDbId });
          } else {
            userDbId = existingUser.id;
          }
        } else {
          // User doesn't exist at all, create it
          const now = new Date();
          const newUser = await db
            .insert(Users)
            .values({
              name: session.user.name || '',
              email: session.user.email,
              image: session.user.image || '',
              provider: 'oauth',
              role: 'user',
              lastLogin: now,
              createdAt: now,
              updatedAt: now,
              preferences: {},
            })
            .returning()
            .get();

          userDbId = newUser.id;
          logger.info('Created new user', { userId: userDbId });
        }
      }
    } catch (error) {
      logger.error('Error getting/creating user ID', { error });
    }

    if (!userDbId) {
      logger.error('Could not find or create database ID for user', { email: session.user.email });
      // Instead of throwing an error, show an empty list with appropriate message
      sayingsForCurrentPage = [];
      throw new Error('User not found in database');
    }
  }

  logger.debug('Using database ID for user', { userId: userDbId });

  // Use the numeric ID from our database
  const allSayings = await getUserSayings(userDbId);
  logger.info('Found sayings for user', { count: allSayings.length, userId: userDbId });

  // Pagination
  const pageSize = config.pagination.sayingsPerPage;
  currentPage = 1;
  totalPages = Math.ceil(allSayings.length / pageSize);
  const startIndex = 0;
  const endIndex = Math.min(startIndex + pageSize, allSayings.length);
  sayingsForCurrentPage = allSayings.slice(startIndex, endIndex);
} catch (error) {
  logger.error('Error getting user sayings', { error });
}

// Create page object for pagination
const page = {
  data: sayingsForCurrentPage,
  start: 0,
  end: sayingsForCurrentPage.length - 1,
  size: config.pagination.sayingsPerPage,
  total: sayingsForCurrentPage.length,
  currentPage: currentPage,
  lastPage: totalPages,
  url: {
    prev: null,
    next: totalPages > 1 ? `/dashboard/page/2` : null,
  },
};
---

<MainLayout>
  <div class="flex flex-col">
    <div class="mt-8 px-4">
      <h1 class="text-3xl font-bold mb-6">Your Sayings</h1>

      {
        page.data.length > 0 ? (
          <>
            <SayingList sayings={page.data} session={session} />
            {page.lastPage > 1 && <Pagination page={page} basePath="/dashboard" />}
          </>
        ) : (
          <EmptyState
            message="You haven't created any sayings yet"
            callToAction={{ text: 'Create Your First Saying', href: '/create' }}
            isDatabaseError={false}
            devMessage="Get started by creating your first saying!"
          />
        )
      }
    </div>
  </div>
</MainLayout>

<script>
  // If we're at /dashboard/hello, redirect to the proper dashboard URL
  if (window.location.pathname === '/dashboard/hello') {
    window.location.pathname = '/dashboard/';
  }
</script>
