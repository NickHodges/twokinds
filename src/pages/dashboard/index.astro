---
import MainLayout from '../../layouts/MainLayout.astro';
import { getSession } from 'auth-astro/server';
import authConfig from '../../../auth.config';
import { db, Sayings, Intros, Types, Likes, eq, and, count } from 'astro:db';
import SayingCard from '../../components/SayingCard.astro';
import type { ExtendedSession } from '../../env';

const session = (await getSession(Astro.request, authConfig)) as ExtendedSession | null;

// This is protected by middleware, but double-check
if (!session?.user?.id) {
  return Astro.redirect('/?error=unauthorized');
}

// Get any success or error messages from URL
const url = new URL(Astro.request.url);
const successMessage = url.searchParams.get('success');
const errorMessage = url.searchParams.get('error');

// First, get all sayings for the user
const userSayings = await db
  .select()
  .from(Sayings)
  .where(eq(Sayings.userId, session.user.id))
  .orderBy(Sayings.createdAt);

// Get liked status and total likes for each saying
const likedStatus = new Map<number, boolean>();
const totalLikes = new Map<number, number>();

for (const saying of userSayings) {
  // Get total likes for this saying
  const likesResult = await db
    .select({ value: count() })
    .from(Likes)
    .where(eq(Likes.sayingId, saying.id))
    .get();
  totalLikes.set(saying.id, likesResult?.value || 0);

  // Get liked status
  const like = await db
    .select()
    .from(Likes)
    .where(and(eq(Likes.userId, session.user.id), eq(Likes.sayingId, saying.id)))
    .get();
  likedStatus.set(saying.id, !!like);
}

// Then, get the related data for each saying
const sayingsWithData = await Promise.all(
  userSayings.map(async (saying) => {
    const [intro, type] = await Promise.all([
      db.select().from(Intros).where(eq(Intros.id, saying.intro)).get(),
      db.select().from(Types).where(eq(Types.id, saying.type)).get(),
    ]);

    return {
      id: saying.id,
      introText: intro?.introText || '',
      typeName: type?.name || '',
      firstKind: saying.firstKind,
      secondKind: saying.secondKind,
      createdAt: saying.createdAt,
      isLiked: likedStatus.get(saying.id) || false,
      totalLikes: totalLikes.get(saying.id) || 0
    };
  })
);
---

<MainLayout title="Dashboard">
  <div class="max-w-4xl mx-auto">
    <h1 class="text-3xl font-bold mb-6">Dashboard</h1>

    {successMessage === 'saying-updated' && (
      <div class="mb-6 p-4 bg-green-100 border border-green-200 text-green-700 rounded-md">
        <p>Your saying has been updated successfully!</p>
      </div>
    )}

    {successMessage === 'saying-deleted' && (
      <div class="mb-6 p-4 bg-green-100 border border-green-200 text-green-700 rounded-md">
        <p>Your saying has been deleted successfully!</p>
      </div>
    )}

    {errorMessage && (
      <div class="mb-6 p-4 bg-red-100 border border-red-200 text-red-700 rounded-md">
        <p>
          {errorMessage === 'invalid-id' && 'Invalid saying ID.'}
          {errorMessage === 'not-found-or-unauthorized' && 'Saying not found or you are not authorized to edit it.'}
          {errorMessage !== 'invalid-id' && errorMessage !== 'not-found-or-unauthorized' && errorMessage}
        </p>
      </div>
    )}

    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
      <div class="flex items-center gap-4 mb-6">
        {
          session.user?.image && (
            <img
              src={session.user.image}
              alt={session.user?.name || 'User avatar'}
              class="w-16 h-16 rounded-full"
            />
          )
        }
        <div>
          <h2 class="text-xl font-semibold">{session.user?.name}</h2>
          <p class="text-gray-600 dark:text-gray-400">{session.user?.email}</p>
        </div>
      </div>

      <div class="border-t dark:border-gray-700 pt-6">
        <div class="flex justify-between items-center mb-6">
          <h3 class="text-lg font-semibold">Your Sayings</h3>
          <a
            href="/create"
            class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 dark:bg-blue-700 dark:hover:bg-blue-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            Create New Saying
          </a>
        </div>

        {
          sayingsWithData.length === 0 ? (
            <div class="text-center py-8 text-gray-500 dark:text-gray-400">
              <p>You haven't created any sayings yet.</p>
              <a
                href="/create"
                class="mt-2 inline-block text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300"
              >
                Create your first saying â†’
              </a>
            </div>
          ) : (
            <div class="grid gap-6 md:grid-cols-2">
              {sayingsWithData.map((saying) => (
                <SayingCard
                  id={saying.id}
                  introText={saying.introText}
                  typeName={saying.typeName}
                  firstKind={saying.firstKind}
                  secondKind={saying.secondKind}
                  createdAt={saying.createdAt}
                  isLiked={saying.isLiked}
                  totalLikes={saying.totalLikes}
                  isAuthenticated={true}
                  isEditable={true}
                />
              ))}
            </div>
          )
        }
      </div>
    </div>
  </div>
</MainLayout>
