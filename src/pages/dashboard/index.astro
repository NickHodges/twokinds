---
import MainLayout from '../../layouts/MainLayout.astro';
import '../../styles/index.css';
import SayingList from '../../components/SayingList.astro';
import Pagination from '../../components/Pagination.astro';
import EmptyState from '../../components/EmptyState.astro';
import { config } from '../../lib/config';
import { getUserSayings } from '../../lib/db-service';
import { getUserDbId } from '../../utils/user-db';
import type { ExtendedSession } from '../../env';
import type { Saying } from '../../types/saying';

// Don't prerender so we always get fresh data
export const prerender = false;

// Log the URL to help with debugging
console.log('Dashboard route accessed with URL:', Astro.url.toString());
console.log('Request headers:', Astro.request.headers);

// Get current user's session
const session = Astro.locals.session as ExtendedSession | null;

// Redirect if not logged in
if (!session?.user) {
  return Astro.redirect('/auth/signin');
}

// Empty array for the page data and default pagination
let sayingsForCurrentPage: Saying[] = [];
let totalPages = 1;
let currentPage = 1;

// Get user's sayings with joins to get intro and type data
try {
  console.log('Dashboard - user session:', {
    id: session.user.id,
    type: typeof session.user.id,
    email: session.user.email
  });
  
  // Use the database user ID if available from middleware, otherwise look it up
  let userDbId = Astro.locals.dbUser?.id;
  
  if (!userDbId) {
    userDbId = await getUserDbId(session.user);
    
    if (!userDbId) {
      console.error('Could not find database ID for user:', session.user.email);
      throw new Error('User not found in database');
    }
  }
  
  console.log('Using database ID for user:', userDbId);
  
  // Use the numeric ID from our database
  const allSayings = await getUserSayings(userDbId);
  console.log(`Found ${allSayings.length} sayings for user`);

  // Pagination
  const pageSize = config.pagination.sayingsPerPage;
  currentPage = 1;
  totalPages = Math.ceil(allSayings.length / pageSize);
  const startIndex = 0;
  const endIndex = Math.min(startIndex + pageSize, allSayings.length);
  sayingsForCurrentPage = allSayings.slice(startIndex, endIndex);
} catch (error) {
  console.error('Error getting user sayings:', error);
}

// Create page object for pagination
const page = {
  data: sayingsForCurrentPage,
  start: 0,
  end: sayingsForCurrentPage.length - 1,
  size: config.pagination.sayingsPerPage,
  total: sayingsForCurrentPage.length,
  currentPage: currentPage,
  lastPage: totalPages,
  url: {
    prev: null,
    next: totalPages > 1 ? `/dashboard/page/2` : null,
  },
};
---

<MainLayout>
  <div class="flex flex-col">
    <div class="mt-8 px-4">
      <h1 class="text-3xl font-bold mb-6">Your Sayings</h1>
      
      {page.data.length > 0 ? (
        <>
          <SayingList sayings={page.data} session={session} />
          {page.lastPage > 1 && <Pagination page={page} basePath="/dashboard" />}
        </>
      ) : (
        <EmptyState
          message="No Sayings Found"
          callToAction={{ text: "Create a Saying", href: "/create" }}
          isDatabaseError={false}
          devMessage="You haven't created any sayings yet. Would you like to create one now?"
        />
      )}
    </div>
  </div>
</MainLayout>

<script>
  // If we're at /dashboard/hello, redirect to the proper dashboard URL
  if (window.location.pathname === '/dashboard/hello') {
    window.location.pathname = '/dashboard/';
  }
</script>
