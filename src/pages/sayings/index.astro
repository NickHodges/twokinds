---
import MainLayout from '../../layouts/MainLayout.astro';
import '../../styles/index.css';
import SayingList from '../../components/SayingList.astro';
import Pagination from '../../components/Pagination.astro';
import Hero from '../../components/Hero.astro';
import EmptyState from '../../components/EmptyState.astro';
import { config } from '../../lib/config';
import { getAllSayings } from '../../lib/db-service';
import type { ExtendedSession } from '../../env';
import type { Saying } from '../../types/saying';

// Don't prerender so we always get fresh data
export const prerender = false;

// Get current user's session
const session = Astro.locals.session as ExtendedSession | null;

// Empty array for the page data and default pagination
let sayingsForCurrentPage: Saying[] = [];
let totalPages = 1;
let currentPage = 1;

// Get all sayings with joins to get intro and type data
try {
  const allSayings = await getAllSayings();

  // Pagination
  const pageSize = config.pagination.sayingsPerPage;
  currentPage = 1;
  totalPages = Math.ceil(allSayings.length / pageSize);
  const startIndex = 0;
  const endIndex = Math.min(startIndex + pageSize, allSayings.length);
  sayingsForCurrentPage = allSayings.slice(startIndex, endIndex);
} catch (error) {
  console.error('Error getting sayings:', error);
}

// Create page object for pagination
const page = {
  data: sayingsForCurrentPage,
  start: 0,
  end: sayingsForCurrentPage.length - 1,
  size: config.pagination.sayingsPerPage,
  total: sayingsForCurrentPage.length,
  currentPage: currentPage,
  lastPage: totalPages,
  url: {
    prev: null,
    next: totalPages > 1 ? `/sayings/2` : null,
  },
};
---

<MainLayout>
  <div class="flex flex-col">
    <Hero session={session} />

    <div class="mt-4">
      {page.data.length > 0 ? (
        <>
          <SayingList sayings={page.data} session={session} />
          {page.lastPage > 1 && <Pagination page={page} basePath="/sayings" />}
        </>
      ) : (
        <EmptyState
          message="No sayings available"
          callToAction={session ? { text: "Create a Saying", href: "/create" } : undefined}
          isDatabaseError={true}
          devMessage="No sayings found. Try creating one!"
        />
      )}
    </div>
  </div>
</MainLayout>
