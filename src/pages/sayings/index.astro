---
import { db, Sayings, Intros, Leads } from 'astro:db';
import Layout from '../../layouts/Layout.astro';
import '../../styles/index.css';
import Header from '../../components/Header.astro';
import SayingList from '../../components/SayingList.astro';
import Pagination from '../../components/Pagination.astro';
import { config } from '../../lib/config';

// Get all sayings with joins to get intro and lead texts
const sayingsData = await db.select().from(Sayings);

// Fetch related data
const intros = await db.select().from(Intros);
const leads = await db.select().from(Leads);

// Combine the data
const allSayings = sayingsData.map(saying => {
  const intro = intros.find(i => i.id === saying.intro);
  const firstLead = leads.find(l => l.id === saying.firstLead);
  const secondLead = leads.find(l => l.id === saying.secondLead);
  
  return {
    ...saying,
    introText: intro?.introText || "Unknown intro",
    firstLeadText: firstLead?.leadText || "Unknown lead",
    secondLeadText: secondLead?.leadText || "Unknown lead"
  };
});

// Pagination
const pageSize = config.pagination.sayingsPerPage;
const currentPage = 1;
const totalPages = Math.ceil(allSayings.length / pageSize);
const startIndex = 0;
const endIndex = Math.min(startIndex + pageSize, allSayings.length);
const sayingsForCurrentPage = allSayings.slice(startIndex, endIndex);

// Create page object that mimics the one from paginate()
const page = {
  data: sayingsForCurrentPage,
  start: startIndex,
  end: endIndex - 1,
  size: pageSize,
  total: allSayings.length,
  currentPage: currentPage,
  lastPage: totalPages,
  url: {
    prev: null,
    next: totalPages > 1 ? "/sayings/2" : null
  }
};

// Don't prerender so we always get fresh data
export const prerender = false;
---

<Layout>
  <div class="container mx-auto px-4 py-8">
    <Header />
    
    <SayingList sayings={page.data} />
    
    {page.lastPage > 1 && (
      <Pagination page={page} basePath="/sayings" />
    )}
  </div>
</Layout>